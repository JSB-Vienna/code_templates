<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="lang_user.xslt"?>
<XMLConfigSettings>
	<FILEINFO>
		<Author>Alex Arseniev</Author>
		<Type>LangUser</Type>
		<Language>ABAP</Language>
		<Desc>User specific settings for ABAP</Desc>
	</FILEINFO>
	<EXPANDS>
		<Expand key="*bool">
			<Descr>Constants for boolean value, including Interface + aliases for 0 + 1</Descr>
			<Text>*   i n t e r f a c e s\n    INTERFACES:\n      zif_ca_c_bool.\n\n*   a l i a s e s\n    ALIASES:\n*     Boolean flags\n      c_false              FOR  zif_ca_c_bool~c_false,\n      c_true               FOR  zif_ca_c_bool~c_true.\n</Text>
		</Expand>
		<Expand key="if">
			<Descr>If (§)</Descr>
			<Text>IF |.\n%SurroundedText%\nENDIF.</Text>
		</Expand>
		<Expand key="*msg">
			<Descr>MESSAGE statment for variables</Descr>
			<Text>MESSAGE ID     %structure_name%-msgid \n        TYPE   %structure_name%-msgty \n        NUMBER %structure_name%-msgno\n        WITH   %structure_name%-msgv1  %structure_name%-msgv2 \n               %structure_name%-msgv3  %structure_name%-msgv4.\n</Text>
		</Expand>
		<Expand key="*docr">
			<Descr>ABAP doc statement for exception</Descr>
			<Text>"! @raising   ${Name_exception_class} | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%description%&lt;/p&gt;\n      |</Text>
		</Expand>
		<Expand key="ife">
			<Descr>If (§) Else</Descr>
			<Text>IF |.\n%SurroundedText%\nELSE.\n\nENDIF.</Text>
		</Expand>
		<Expand key="*docp">
			<Descr>ABAP doc statement for a parameter</Descr>
			<Text>"! @parameter ${Name_parameter} | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%description%&lt;/p&gt;\n      |</Text>
		</Expand>
		<Expand key="case">
			<Descr>Case (§)</Descr>
			<Text>CASE |.\n	WHEN .\n	WHEN .\n	WHEN OTHERS.\nENDCASE.</Text>
		</Expand>
		<Expand key="*bopfmgr">
			<Descr>Getting BOPF TA + Service manager</Descr>
			<Text>"Get BOPF transaction and service manager\n    DATA(lo_ta_mgr)  = /bobf/cl_tra_trans_mgr_factory=&gt;get_transaction_manager( ).\n    DATA(lo_srv_mgr) = /bobf/cl_tra_serv_mgr_factory=&gt;get_service_manager(\n                                             iv_bo_key = %bopf_interface_name%=&gt;sc_bo_key ).\n</Text>
		</Expand>
		<Expand key="*instevt">
			<Descr>Instance event declaration</Descr>
			<Text>*   i n s t a n c e   e v e n t s\n    EVENTS:\n|</Text>
		</Expand>
		<Expand key="*init">
			<Descr>Report Event INITIALIZATION</Descr>
			<Text>*---------------------------------------------------------------------*\n*     i n i t i a l i z a t i o n\n*---------------------------------------------------------------------*\nINITIALIZATION.\n  ${class_name}=&gt;initialization( ).\n\n      "! &lt;p class="shorttext synchronized" lang="${dev_langu}"&gt;Initialization of report data / selections&lt;/p&gt;\n      initialization,\n\n  METHOD initialization.\n    "-----------------------------------------------------------------*\n    "   Initialization of report data / selections\n    "-----------------------------------------------------------------*\n    |\n  ENDMETHOD.                    "initialization\n\n</Text>
		</Expand>
		<Expand key="*blkins">
			<Descr>Documentation new inserted block -&gt; *-- INS-BEGIN  NNN-yyyy-mm-dd</Descr>
			<Text>*-- INS-BEGIN  %Your_Initials%-%DateTime%\n|\n*-- INS-END    %Your_Initials%-%DateTime%</Text>
		</Expand>
		<Expand key="*alias"><Descr>Alias and predefined vars. for msg types and ranges/sel.opt.</Descr><Text>*   a l i a s e s\n    ALIASES:\n*     Group description  \n      x..                  FOR  x..\n\n</Text></Expand><Expand key="*tables"><Descr>Table declaration in a report for select-options</Descr><Text>* t a b l e s   /   s t r u c t u r e s   for selection field definition\nTABLES:\n |            "description\n\n</Text></Expand><Expand key="*methut"><Descr>Method definition and implementation for Unit Testing</Descr><Text>"! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%description%&lt;/p&gt;\n      test_%method_name% FOR TESTING,\n\n  METHOD test_%method_name%.\n    "-----------------------------------------------------------------*\n    "   %description%\n    "-----------------------------------------------------------------*\n    "Local data definitions\n*    DATA:\n*      lv_...               TYPE x..\n\n    \n  ENDMETHOD.                    "test_%method_name%\n</Text></Expand><Expand key="*atselout"><Descr>Report Event AT SELECTION-SCREEN OUTPUT</Descr><Text>*---------------------------------------------------------------------*\n*     a t   s e l e c t i o n - s c r e e n   OUTPUT\n*---------------------------------------------------------------------*\nAT SELECTION-SCREEN OUTPUT. \n  %class_name%=&gt;at_sel_screen_output( ).\n\n\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Control / adjust selection screen fields&lt;/p&gt;\n      at_sel_screen_output,\n\n\n  METHOD at_sel_screen_output.\n    "-----------------------------------------------------------------*\n    "   Control / adjust selection screen fields\n    "-----------------------------------------------------------------*\n    \n  ENDMETHOD.                    "at_sel_screen_output\n\n\n</Text></Expand><Expand key="*atselvr"><Descr>Report Event AT SELECTION-SCREEN ON VALUE-REQUEST</Descr><Text></Text></Expand><Expand key="loop"><Descr>Loop (§)</Descr><Text>LOOP AT |.\n%SurroundedText%\nENDLOOP.</Text></Expand><Expand key="*statevt"><Descr>Static event declaration</Descr><Text>*   s t a t i c   e v e n t s\n    CLASS-EVENTS:\n|</Text></Expand><Expand key="*data"><Descr>Local data definition</Descr><Text>"Local data definitions\n    DATA:\n      lv_|                  TYPE x...\n\n</Text></Expand><Expand key="*const"><Descr>Constants definition</Descr><Text>*   c o n s t a n t s\n    CONSTANTS:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%description%&lt;/p&gt;\n      c_|                   TYPE x..               VALUE 'xxx'  ##no_text,\n</Text></Expand><Expand key="define"><Descr>Define (§)</Descr><Text>DEFINE |.\n%SurroundedText%\nEND-OF-DEFINITION.</Text></Expand><Expand key="*lineins"><Descr>Mark single inserted line</Descr><Text>"INS+%Your_Initials%-%DateTime%</Text></Expand><Expand key="*msgty"><Descr>Constants for message types (E, I, S, W)</Descr><Text>*   i n t e r f a c e s\n    INTERFACES:\n      if_xo_const_message.\n\n*   a l i a s e s\n    ALIASES:\n*     Message types\n      c_msgty_e            FOR  if_xo_const_message~error,\n      c_msgty_i            FOR  if_xo_const_message~info,\n      c_msgty_s            FOR  if_xo_const_message~success,\n      c_msgty_w            FOR  if_xo_const_message~warning.\n</Text></Expand><Expand key="*methdni"><Descr>Method definition and implementation part</Descr><Text>"! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%description%&lt;/p&gt;\n      "!\n      "! @parameter iv_... || &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n      "! @raising   zcx_... | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n      %method_name%\n        IMPORTING\n          iv_...                TYPE x..                x..\n          iv_...               TYPE x..                x..\n        EXPORTING\n          ev_...               TYPE x..\n        CHANGING \n          cv_...               TYPE x..\n        RETURNING\n          value(rv_..   )      TYPE x..\n        RAISING\n          x..\n\n  METHOD %method_name%.\n    "-----------------------------------------------------------------*\n    "   %description%\n    "-----------------------------------------------------------------*\n    "Local data definitions\n*    DATA:\n*      lv_...               TYPE x..\n\n    \n  ENDMETHOD.                    "%method_name%\n</Text></Expand><Expand key="*privsec"><Descr>Declaration private section</Descr><Text>* P R I V A T E   S E C T I O N\n  PRIVATE SECTION.\n</Text></Expand><Expand key="*raise"><Descr>Raise exception</Descr><Text>RAISE EXCEPTION TYPE %class_name%\n      EXPORTING\n        textid   = %class_name%=&gt;%exception_id_as_defined_text_tab_of_class%\n        mv_msgty = c_msgty_%message_type_like_E_W_I_or_S%\n        mv_msgv1 = CONV #( |{ %variable_name_like_LV_MATNR% ALPHA = OUT }| ).\n</Text></Expand><Expand key="*linedel"><Descr>Mark single deleted line</Descr><Text>"DEL-%Your_Initials%-%DateTime%</Text></Expand><Expand key="*classwf"><Descr>Class pattern for a workflow class</Descr><Text>"! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%Module_abbrev%: BC %class_description%&lt;/p&gt;\nCLASS %class_name% DEFINITION PUBLIC\n                                      CREATE PROTECTED.\n\n* P U B L I C   S E C T I O N\n  PUBLIC SECTION.\n*   i n t e r f a c e s\n    INTERFACES:\n      bi_object,\n      bi_persistent,\n      if_workflow,\n      if_xo_const_message,\n      zif_ca_c_bool.\n\n*   a l i a s e s\n    ALIASES:\n*     Boolean flags\n      c_false            FOR zif_ca_c_bool~c_false,\n      c_true             FOR zif_ca_c_bool~c_true,\n*     BI_OBJECT methods\n      default_attr_value FOR bi_object~default_attribute_value,\n      execute_def_method FOR bi_object~execute_default_method,\n      release            FOR bi_object~release,\n*     BI_PERSISTENT methods\n      find_by_lpor       FOR bi_persistent~find_by_lpor,\n      lpor               FOR bi_persistent~lpor,\n      refresh            FOR bi_persistent~refresh.\n\n*   c o n s t a n t s\n    CONSTANTS:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;My type Id&lt;/p&gt;\n      c_my_typeid          TYPE sibftypeid        VALUE '%class_name%'  ##no_text.\n\n*   i n s t a n c e   a t t r i b u t e s\n    DATA:\n*     o b j e c t   r e f e r e n c e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mo_...       TYPE REF TO x... READ-ONLY,\n\n**     t a b l e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mt_...       TYPE x... READ-ONLY,\n*\n*     s t r u c t u r e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;BO-Reference on %BO_Name_e_g_BUS2012%&lt;/p&gt;\n*      mbo_%BO_Name_e_g_BUS2012%      TYPE sibflporb VALUE zif_fi_c_wf_bos=&gt;cbo_%BO_Name_e_g_BUS2012% READ-ONLY,\n\n*     s i n g l e   v a l u e s\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Key attribute - %Description_for_Business_object_key%&lt;/p&gt;\n      m%Set_name_V_KEY_or_S_KEY%   TYPE %key_data_elem_or_struct% READ-ONLY,\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Default attribute with prepared object key&lt;/p&gt;\n      mv_def_attr  TYPE text80 READ-ONLY.\n\n*   s t a t i c   m e t h o d s\n    CLASS-METHODS:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Create instance or get from buffer&lt;/p&gt;\n      "!\n      "! @parameter is_lpor      | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Workflow instance key&lt;/p&gt;\n      "! @parameter i%Set_name_V_KEY_or_S_KEY%  | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%Description_for_Business_object_key%&lt;/p&gt;\n      "! @parameter iv_exist_chk | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;1 = Execute existence check&lt;/p&gt;\n      "! @parameter ro_instance  | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Created instance or found in buffer&lt;/p&gt;\n      "! @raising   zcx_ca_param | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;\n      "! @raising   zcx_ca_dbacc | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common exception: Database access&lt;/p&gt;\n      get_instance\n        IMPORTING\n          is_lpor           TYPE sibflpor OPTIONAL\n          i%Set_name_V_KEY_or_S_KEY% TYPE %key_data_elem_or_struct% OPTIONAL\n          iv_exist_chk      TYPE dml_boolean DEFAULT c_true\n            PREFERRED PARAMETER i%Set_name_V_KEY_or_S_KEY%\n        RETURNING\n          VALUE(ro_instance) TYPE REF TO %class_name%\n        RAISING\n          zcx_ca_param\n          zcx_ca_dbacc,\n\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Remove instance from buffer&lt;/p&gt;\n      "!\n      "! @parameter is_lpor      | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Workflow instance key&lt;/p&gt;\n      "! @raising   zcx_ca_param | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;\n      remove\n        IMPORTING\n          is_lpor TYPE sibflpor\n        RAISING\n          zcx_ca_param.\n\n*   s t a t i c   e v e n t s\n    CLASS-EVENTS:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Object created&lt;/p&gt;\n      created.\n\n*   i n s t a n c e   m e t h o d s\n    METHODS:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;CONSTRUCTOR&lt;/p&gt;\n      "!\n      "! @parameter i%Set_name_V_KEY_or_S_KEY% | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%Description_for_Business_object_key%&lt;/p&gt;\n      "! @parameter iv_exist_chk | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;1 = Execute existence check&lt;/p&gt;\n      "! @raising   zcx_ca_param | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;\n      "! @raising   zcx_ca_dbacc | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common exception: Database access&lt;/p&gt;\n      constructor\n        IMPORTING\n          i%Set_name_V_KEY_or_S_KEY% TYPE %key_data_elem_or_struct%\n          iv_exist_chk      TYPE dml_boolean\n        RAISING\n          zcx_ca_param\n          zcx_ca_dbacc,\n\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Display object in standard transaction&lt;/p&gt;\n      task_display,\n\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Task to/for …. WF step&lt;/p&gt;\n      "!\n      "! @raising   zcx_ca_param           | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;\n      "! @raising   cx_bo_action_cancelled | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Temporary Bus. Exception: Dialog Terminated Before Changing&lt;/p&gt;\n      task_xxx\n        RAISING\n          zcx_ca_param\n          cx_bo_action_cancelled,\n\n    "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Assemble task short text&lt;/p&gt;\n    "!\n    "! @parameter iv_task_desc | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Complementing description/action/function&lt;/p&gt;\n    "! @parameter rv_task_desc | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Completed task short description&lt;/p&gt;\n      get_task_descr\n        IMPORTING\n          iv_task_desc TYPE text80\n        RETURNING\n          VALUE(rv_task_desc) TYPE witext,\n\n    "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Instanzereignis auslösen&lt;/p&gt;\n    "!\n    "! @parameter iv_event             | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Event name&lt;/p&gt;\n    "! @parameter iv_do_commit         | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;1 = Do commit here&lt;/p&gt;\n    "! @raising   zcx_ca_param         | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;\n    "! @raising   cx_swf_ifs_exception | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Workflow exception&lt;/p&gt;\n    raise_event\n      IMPORTING\n        iv_event     TYPE sibfevent\n        iv_do_commit TYPE dml_boolean DEFAULT c_false\n      RAISING\n        zcx_ca_param\n        cx_swf_ifs_exception.\n\n*   i n s t a n c e   e v e n t s\n    EVENTS:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Object changed&lt;/p&gt;\n      changed.\n\n\n* P R O T E C T E D   S E C T I O N\n  PROTECTED SECTION.\n*   a l i a s e s\n    ALIASES:\n*     Message types\n      c_msgty_e            FOR  if_xo_const_message~error,\n      c_msgty_i            FOR  if_xo_const_message~info,\n      c_msgty_s            FOR  if_xo_const_message~success,\n      c_msgty_w            FOR  if_xo_const_message~warning,\n**     Event names\n*      c_evt_name_created   FOR zif_ca_c_wf_evt_names~c_evt_name_created,\n*      c_evt_name_changed   FOR zif_ca_c_wf_evt_names~c_evt_name_changed.\n**     Application log\n*      c_log_object         FOR  zif_xx_c_name~c_log_object,\n*      c_log_subobj         FOR  zif_xx_c_name~c_log_subobj.\n\n*   i n s t a n c e   a t t r i b u t e s\n    DATA:\n*     o b j e c t   r e f e r e n c e s\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common WF object: Execution of workflow/BO macros&lt;/p&gt;\n      mo_wf_macros         TYPE REF TO zcl_ca_wf_exec_macros.\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common object: Application log (BAL)&lt;/p&gt;\n*      mo_log        TYPE REF TO zcl_ca_log,\n\n**     t a b l e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mt_...        TYPE x...,\n\n*     s t r u c t u r e s\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Workflow object instance key&lt;/p&gt;\n      ms_lpor       TYPE sibflpor.\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%BO_Name_e_g_BUS2012%-Instance to execute/determine of methods/attribs.&lt;/p&gt;\n*      mbo_%BO_Name_e_g_BUS2012%_inst TYPE obj_record,\n*\n**     s i n g l e   v a l u e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mv_...        TYPE x...,\n\n*   i n s t a n c e   m e t h o d s\n    METHODS:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Check existence of object&lt;/p&gt;\n      "!\n      "! @parameter i%Set_name_V_KEY_or_S_KEY%   | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%Description_for_Business_object_key%&lt;/p&gt;\n      "! @raising   zcx_ca_param | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;\n      "! @raising   zcx_ca_dbacc | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common exception: Database access&lt;/p&gt;\n      check_existence\n        IMPORTING\n          i%Set_name_V_KEY_or_S_KEY% TYPE %key_data_elem_or_struct%\n        RAISING\n          zcx_ca_param\n          zcx_ca_dbacc,\n\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Create instance of BO %BO_Name_e_g_BUS2012% object&lt;/p&gt;\n      "!\n      "! @raising   zcx_ca_wf_exec_macros | &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Common WF exception: Macro execution errors&lt;/p&gt;\n      create_bo_%BO_Name_e_g_BUS2012%_instance\n        RAISING\n          zcx_ca_wf_exec_macros.\n\n\n* P R I V A T E   S E C T I O N\n  PRIVATE SECTION.\n*   l o c a l   t y p e   d e f i n i t i o n\n    TYPES:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Buffered instance&lt;/p&gt;\n      BEGIN OF ty_s_buffer.\n        INCLUDE TYPE sibflpor AS s_key.\n    TYPES:\n        o_instance TYPE REF TO %class_name%,\n      END   OF ty_s_buffer,\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Instance buffer&lt;/p&gt;\n      ty_t_buffer TYPE SORTED TABLE OF ty_s_buffer\n                                       WITH UNIQUE KEY s_key.\n\n*   s t a t i c   a t t r i b u t e s\n    CLASS-DATA:\n*     t a b l e s\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Instance buffer&lt;/p&gt;\n      mt_buffer     TYPE ty_t_buffer.\n\nENDCLASS.                     "%class_name%  DEFINITION\n\n\nCLASS %class_name% IMPLEMENTATION.\n\n  METHOD get_instance.\n    "-----------------------------------------------------------------*\n    "   Get instance\n    "-----------------------------------------------------------------*\n    "Local data definitions\n    DATA:\n      ls_lpor    TYPE sibflpor,\n      l%Set_name_V_KEY_or_S_KEY% TYPE %key_data_elem_or_struct%.\n\n*    TRY.\n    IF is_lpor IS NOT INITIAL.\n      "Set key into structured definition\n      IF is_lpor-instid IS NOT INITIAL.  "Avoid destruction of type conform initial values\n        l%Set_name_V_KEY_or_S_KEY% = CONV #( is_lpor-instid ).\n      ENDIF.\n      ls_lpor  = is_lpor.\n      "Set these values in any case, e. g. to create/get an instance only with the key string\n      ls_lpor-typeid = %class_name%=&gt;c_my_typeid.\n      ls_lpor-catid  = swfco_objtype_cl.\n\n    ELSEIF i%Set_name_V_KEY_or_S_KEY% IS NOT INITIAL.\n      l%Set_name_V_KEY_or_S_KEY% = i%Set_name_V_KEY_or_S_KEY%.\n      ls_lpor = VALUE #( instid = CONV #( i%Set_name_V_KEY_or_S_KEY% )\n                         typeid = %class_name%=&gt;c_my_typeid\n                         catid  = swfco_objtype_cl ).\n\n    ELSE.\n      "At least one of the following parameters must be passed: &amp;1 &amp;2 &amp;3 &amp;4\n      RAISE EXCEPTION TYPE zcx_ca_param\n        EXPORTING\n          textid   = zcx_ca_param=&gt;at_least_one\n         mv_msgty = c_msgty_e\n          mv_msgv1 = 'IS_LPOR'\n          mv_msgv2 = 'I%Set_name_V_KEY_or_S_KEY%'\n          mv_msgv3 = space\n          mv_msgv4 = space ##no_text.\n    ENDIF.\n\n    "If the key is still not available create no instance\n    IF l%Set_name_V_KEY_or_S_KEY% IS INITIAL.\n      RETURN.\n    ENDIF.\n\n    "Is an instance already created?\n    READ TABLE mt_buffer INTO DATA(ls_buffer)\n                         WITH KEY s_key = ls_lpor.\n    IF sy-subrc EQ 0.\n      "Refresh some data\n      ls_buffer-o_instance-&gt;refresh( ).\n\n    ELSE.\n*          "Create application log to be able to log other creation errors here\n*          DATA(lo_log) = zcl_ca_log=&gt;get_instance_from_buffer(\n*                                               iv_object = c_log_object\n*                                               iv_subobj = c_log_subobj\n*                                               is_lpor   = CORRESPONDING #( ls_lpor ) ).\n\n      "Create instance of payment approval object\n      ls_buffer-o_instance = NEW #( i%Set_name_V_KEY_or_S_KEY% = l%Set_name_V_KEY_or_S_KEY% ).\n*                                         io_log   = lo_log ).\n\n      ls_buffer-s_key = ls_buffer-o_instance-&gt;lpor( ).\n      INSERT ls_buffer INTO TABLE mt_buffer.\n    ENDIF.\n\n    ro_instance = ls_buffer-o_instance.\n\n*      CATCH zcx_ca_error INTO DATA(lx_error).\n*        IF lo_log IS BOUND.\n*          lo_log-&gt;add_msg_exc( ix_excep = lx_error\n*                               iv_all   = c_true ).\n*          lo_log-&gt;save( iv_commit      = c_false   "Commit by WF runtime environment\n*                        iv_in_upd_task = c_true ).\n*        ENDIF.\n*    ENDTRY.\n  ENDMETHOD.                    "get_instance\n\n\n  METHOD remove.\n    "-----------------------------------------------------------------*\n    "   Remove instance from buffer\n    "-----------------------------------------------------------------*\n    IF is_lpor IS INITIAL.\n      "Parameter '&amp;1' hat ungültigen Wert '&amp;2'\n      RAISE EXCEPTION TYPE zcx_ca_param\n        EXPORTING\n          textid   = zcx_ca_param=&gt;param_invalid\n          mv_msgty = c_msgty_e\n          mv_msgv1 = 'IS_LPOR'\n          mv_msgv2 = 'INITIAL' ##no_text.\n    ENDIF.\n\n    DELETE mt_buffer WHERE s_key EQ is_lpor.\n  ENDMETHOD.                    "remove\n\n\n  METHOD constructor.\n    "-----------------------------------------------------------------*\n    "   Constructor\n    "-----------------------------------------------------------------*\n    me-&gt;ms_lpor-typeid = c_my_typeid.\n    me-&gt;ms_lpor-catid  = swfco_objtype_cl.\n\n    IF i%Set_name_V_KEY_or_S_KEY% IS INITIAL.\n      RETURN.\n    ENDIF.\n\n    "Check existence of object\n    IF iv_exist_chk EQ c_true.\n      me-&gt;check_existence( i%Set_name_V_KEY_or_S_KEY% ).\n    ENDIF.\n\n    "Complete and keep several attributes\n    me-&gt;m%Set_name_V_KEY_or_S_KEY%   = i%Set_name_V_KEY_or_S_KEY%.\n    me-&gt;ms_lpor-instid = me-&gt;m%Set_name_V_KEY_or_S_KEY%.\n|\n*    "Set %BO_Name_e_g_BUS2012% key \n*    me-&gt;mo_wf_macros    = NEW #( ).\n*    me-&gt;mbo_%BO_Name_e_g_BUS2012%-instid = CONV #( me-&gt;m%Set_name_V_KEY_or_S_KEY% ).\n\n    "Set default attribute = resolved into readable key\n    me-&gt;default_attr_value( ).\n\n*    "Keep log and set prepared key value\n*    me-&gt;mo_log = io_log.\n*    me-&gt;mo_log-&gt;set_ext_number( CONV #( me-&gt;mv_def_attr ) ).\n  ENDMETHOD.                    "constructor\n\n\n  METHOD check_existence.\n    "-----------------------------------------------------------------*\n    "   Check existence of object\n    "-----------------------------------------------------------------*\n*   !!!  Avoid using a BAPI or functions that checks several things,  !!!\n*   !!!  like authority-checks. It needs only a simple check to       !!!\n*   !!!  create the instance to provide e. g. the task description.   !!!\n*   !!!  Read additional data, e. g. like item lines, when needed in  !!!\n*   !!!  the corresponding method.                                    !!!\n\n*    SELECT SINGLE * INTO  me-&gt;ms_xxxx\n*                    FROM  xxxx\n*                    WHERE aaaa EQ i%Set_name_V_KEY_or_S_KEY%.\n*    IF sy-subrc NE 0.\n*      "No entry exists for &amp; in Table &amp;\n*      RAISE EXCEPTION TYPE zcx_ca_dbacc\n*        EXPORTING\n*          textid   = zcx_ca_dbacc=&gt;no_entry\n*          mv_msgty = c_msgty_e\n*          mv_msgv1 = CONV #( |{ i%Set_name_V_KEY_or_S_KEY% ALPHA = OUT }| )\n*          mv_msgv2 = 'TABLE_NAME' ##no_text.\n*\n*      "or for a specific message you like to use\n*      "Invoice document &amp;1 &amp;2 does not exist\n*      DATA(lx_error) =\n*           CAST zcx_ca_dbacc(\n*                  zcx_ca_error=&gt;create_exception(\n*                           iv_excp_cls = zcx_ca_dbacc=&gt;c_zcx_ca_dbacc\n*                           iv_class    = CONV #( c_my_typeid )\n*                           iv_method   = 'CHECK_EXISTENCE'\n*                           is_msg      = VALUE #( msgid = 'M8'\n*                                                  msgno = '184'\n*                                                  msgv1 = CONV #( |{ is_key-belnr ALPHA = OUT }| )\n*                                                  msgv2 = is_key-gjahr )  ) )  ##no_text.\n*      IF lx_error IS BOUND.\n*        RAISE EXCEPTION lx_error.\n*      ENDIF.\n*    ENDIF.\n  ENDMETHOD.                    "check_existence\n\n\n  METHOD task_display.\n    "-----------------------------------------------------------------*\n    "   Display object in standard transaction\n    "-----------------------------------------------------------------*\n*    SET PARAMETER ID 'ppp' FIELD me-&gt;mv_user_id.\n*    CALL TRANSACTION 'ttttt' WITH AUTHORITY-CHECK\n*                              AND SKIP FIRST SCREEN.\n  ENDMETHOD.                    "task_display\n\n\n  METHOD task_xxx.\n    "-----------------------------------------------------------------*\n    "   Call dialog to complete accounting document for posting\n    "-----------------------------------------------------------------*\n*    Example how to execute a BO method\n*    me-&gt;create_bo_%BO_Name_e_g_BUS2012%_instance( ).\n*    swc_call_method  me-&gt;mbo_%BO_Name_e_g_BUS2012%_inst  'Completion'  _swo_data=&gt;swo_container ##no_text.\n  ENDMETHOD.                    "task_xxx\n\n\n  METHOD get_task_descr.\n    "-----------------------------------------------------------------*\n    "   Assemble task short text\n    "-----------------------------------------------------------------*\n    "= FI: Parked posting / Doc. No. bbbb nnnnnnn yyyy - Description\n    rv_task_desc = |{ me-&gt;mv_def_attr } - { iv_task_desc }|.\n\n    "Use this statement in your task, here in this sample for a background step\n*    &amp;_WI_OBJECT_ID.GET_TASK_DESCR(IV_TASK_DESC='Beleg buchen (BG)')&amp;\n  ENDMETHOD.                    "get_task_descr\n\n\n  METHOD raise_event.\n    "-----------------------------------------------------------------*\n    "   Raise event\n    "-----------------------------------------------------------------*\n*    zcl_ca_wf_wapi_utils=&gt;create_event_extended( \n*                                  is_lpor      = CORRESPONDING #( me-&gt;ms_lpor )\n*                                  iv_event     = iv_event\n*                                  iv_do_commit = iv_do_commit ).\n  ENDMETHOD.                    "raise_event\n\n\n  METHOD create_bo_%BO_Name_e_g_BUS2012%_instance.\n    "-----------------------------------------------------------------*\n    "   Create instance of BO object\n    "-----------------------------------------------------------------*\n*    IF me-&gt;mbo_%BO_Name_e_g_BUS2012%_inst IS INITIAL.\n*      me-&gt;mbo_%BO_Name_e_g_BUS2012%_inst = me-&gt;mo_wf_macros-&gt;create_bo(\n*                                           iv_bo_name  = me-&gt;mbo_%BO_Name_e_g_BUS2012%-typeid\n*                                           iv_bo_key   = me-&gt;mbo_%BO_Name_e_g_BUS2012%-instid\n*                                           iv_no_excep = c_true ).\n*    ENDIF.\n  ENDMETHOD.                    "create_bo_%BO_Name_e_g_BUS2012%_instance\n\n\n  METHOD bi_object~default_attribute_value.\n    "-----------------------------------------------------------------*\n    "   Returns a description and/or prepared key of the object.\n    "-----------------------------------------------------------------*\n*    me-&gt;mv_def_attr = |{ me-&gt;ms_address-fullname } ({ me-&gt;mv_user_id })|.\n    "TEXT-PPO = FI: Parked posting / Doc. No.\n*    me-&gt;mv_def_attr = condense( |{ text-ppo } { me-&gt;ms_doc_key-bukrs } | &amp;\n*                      |{ me-&gt;ms_doc_key-belnr ALPHA = OUT }  { me-&gt;ms_doc_key-gjahr }| ).\n    result = REF #( me-&gt;mv_def_attr ).\n  ENDMETHOD.                    "bi_object~default_attribute_value\n\n\n  METHOD bi_object~execute_default_method.\n    "-----------------------------------------------------------------*\n    "   Execute default method\n    "-----------------------------------------------------------------*\n    me-&gt;task_display( ).\n  ENDMETHOD.                    "bi_object~execute_default_method\n\n\n  METHOD bi_object~release ##needed.\n    "-----------------------------------------------------------------*\n    "   Release instance\n    "-----------------------------------------------------------------*\n\n  ENDMETHOD.                    "bi_object~release\n\n\n  METHOD bi_persistent~find_by_lpor.\n    "-----------------------------------------------------------------*\n    "   Create workflow / workitem instance\n    "-----------------------------------------------------------------*\n    TRY.\n        result = CAST bi_persistent(\n                         %class_name%=&gt;get_instance( is_lpor = lpor ) ).\n\n      CATCH zcx_ca_error INTO DATA(lx_catched).\n        "As long as no exceptions are declared for this method, this is\n        "currently the best solution.\n        MESSAGE lx_catched TYPE c_msgty_s DISPLAY LIKE lx_catched-&gt;mv_msgty.\n    ENDTRY.\n  ENDMETHOD.                    "bi_persistent~find_by_lpor\n\n\n  METHOD bi_persistent~lpor.\n    "-----------------------------------------------------------------*\n    "   Return instance key\n    "-----------------------------------------------------------------*\n    result = me-&gt;ms_lpor.\n  ENDMETHOD.                    "bi_persistent~lpor\n\n\n  METHOD bi_persistent~refresh ##needed.\n    "-----------------------------------------------------------------*\n    "   Refresh instance\n    "-----------------------------------------------------------------*\n*    TRY.\n*        me-&gt;check_existence( ).\n*\n*      CATCH zcx_ca_error INTO DATA(lx_catched).\n*        "As long as no exceptions are declared for this method, this is\n*        "currently the best solution.\n*        MESSAGE lx_catched TYPE c_msgty_s DISPLAY LIKE lx_catched-&gt;mv_msgty.\n*    ENDTRY.\n  ENDMETHOD.                    "bi_persistent~refresh\n\nENDCLASS.                     "%class_name%  IMPLEMENTATION\n\n</Text></Expand><Expand key="*interf"><Descr>Definition interfaces</Descr><Text>*   i n t e r f a c e s\n    INTERFACES:\n      x..\n</Text></Expand><Expand key="*start"><Descr>Start-of-selection for local class</Descr><Text>*---------------------------------------------------------------------*\n*     s t a r t - o f - s e l e c t i o n\n*---------------------------------------------------------------------*\nSTART-OF-SELECTION.\n  %class_name%=&gt;main( ).\n</Text></Expand><Expand key="*sopt"><Descr>Constants for Sign/Options für RANGES/SELECT-OPTIONS</Descr><Text>*   i n t e r f a c e s\n    INTERFACES:\n      if_fsbp_const_range.\n\n*   a l i a s e s\n    ALIASES:\n*     Signs and options for RANGES/SELECT-OPTIONS\n      c_sign_i             FOR  if_fsbp_const_range~sign_include,\n      c_sign_e             FOR  if_fsbp_const_range~sign_exclude,\n      c_opt_eq             FOR  if_fsbp_const_range~option_equal,\n      c_opt_ne             FOR  if_fsbp_const_range~option_not_equal,\n      c_opt_gt             FOR  if_fsbp_const_range~option_greater,\n      c_opt_ge             FOR  if_fsbp_const_range~option_greater_equal,\n      c_opt_lt             FOR  if_fsbp_const_range~option_less,\n      c_opt_le             FOR  if_fsbp_const_range~option_less_equal,\n      c_opt_cp             FOR  if_fsbp_const_range~option_contains_pattern,\n      c_opt_np             FOR  if_fsbp_const_range~option_not_contains_pattern,\n      c_opt_bt             FOR  if_fsbp_const_range~option_between,\n      c_opt_nb             FOR  if_fsbp_const_range~option_not_between.\n</Text></Expand><Expand key="*creexc"><Descr>Create exception from different message variables and return to caller</Descr><Text>DATA(%lx_exception_instance%) =\n     CAST %Name_of_exception_class%(\n            zcx_ca_error=&gt;create_exception(\n                     iv_excp_cls = %Name_of_exception_class%=&gt;c_%Name_of_exception_class%\n                     iv_function = |\n                     iv_subroutine = 'xxx'\n                     iv_class    = 'xxx'\n                     iv_method   = 'xxx'\n                     is_msg      = corresponding #(  )  "Provide ONLY if NOT from SYST!! \n                     is_return   = value #(  )\n                     it_return   = x\n                     iv_subrc    = sy-subrc             "To use SYST message variables pass only SUBRC!!\n                     ix_error    = lx_catched ) )  ##no_text.\nIF %lx_exception_instance% IS BOUND.\n  RAISE EXCEPTION %lx_exception_instance%.\nENDIF.</Text></Expand><Expand key="*doc"><Descr>ABAP doc Tag for synch with backend</Descr><Text>"! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;|&lt;/p&gt;</Text></Expand><Expand key="*selflds"><Descr>Selection fields with block</Descr><Text>* s e l e c t i o n   f i e l d s\n*- ... ---------------------------------------------------------------*\n*- Data selection ----------------------------------------------------*\nselection-screen begin of block %block_id% with frame \n                                    title text-%block_id%.\nparameters:\n* Description\n  p_|             x..                 option,\n* Description\n  p_cb...        as   checkbox       option,\n* Description\n  p_rb...        radiobutton         option,\n\nselect-options:\n* Description\n  so_...         for  x..            option,\n\n*SELECTION-SCREEN  BEGIN OF LINE.\n*PARAMETERS\n** Description\n*  p_cb_x..       AS   CHECKBOX       DEFAULT 'X'.\n*SELECTION-SCREEN: COMMENT 03(30) FOR FIELD p_cb_x..,\n*                  POSITION 35.\n*PARAMETERS\n** Description\n*  p_cb_x..       AS   CHECKBOX.\n*SELECTION-SCREEN: COMMENT 38(30) FOR FIELD p_cb_x..,\n*                  POSITION 70.\n*  parameters\n**   Description\n*    p_...          ...                 [option]\n*  selection-screen  comment 73(30) for field p_...\n*SELECTION-SCREEN  END   OF LINE.\nselection-screen end   of block %block_id%.\n\n</Text></Expand><Expand key="*try"><Descr>TRY   .... CATCH for ZCX_CA_ERROR or its subclasses</Descr><Text>TRY.\n  |\n\n  CATCH zcx_ca_error INTO DATA(lx_catched).\n    MESSAGE lx_catched TYPE lx_catched-&gt;c_msgty_s DISPLAY LIKE lx_catched-&gt;mv_msgty.\nENDTRY.\n</Text></Expand><Expand key="*class"><Descr>Class definition and implementation for global AND local classes</Descr><Text>"! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%class_description%&lt;/p&gt;\nCLASS %class_name% DEFINITION PUBLIC   "DELETE THIS additon PUBLIC for LOCAL classes!!\n                               FINAL\n                               CREATE PUBLIC.\n* P U B L I C   S E C T I O N\n  PUBLIC SECTION.\n*   s t a t i c   m e t h o d s\n    CLASS-METHODS:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Main method, that controls the entire processing&lt;/p&gt;\n      main.\n\n* P R I V A T E   S E C T I O N\n  PRIVATE SECTION.\n**   s t a t i c   a t t r i b u t e s\n*    CLASS-DATA:\n**     o b j e c t   r e f e r e n c e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mo_...               TYPE REF TO x..\n*\n**     d a t a   r e f e r e n c e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mr_...               TYPE REF TO x..\n*\n**     t a b l e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mt_...               TYPE x.. \n*\n**     s t r u c t u r e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      ms_...               TYPE x..\n*\n**     s i n g l e   v a l u e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mv_...               TYPE x..\nENDCLASS.                     "%class_name%  DEFINITION\n\n\nCLASS %class_name% IMPLEMENTATION.\n\n  METHOD main.\n    "-----------------------------------------------------------------*\n    "   Main method, that controls the entire processing\n    "-----------------------------------------------------------------*\n    "Local data definitions\n*    DATA:\n*      l...                  TYPE x..\n\n    |\n  ENDMETHOD.                    "main\n\nENDCLASS.                     "%class_name%  IMPLEMENTATION\n</Text></Expand><Expand key="*statdata"><Descr>Declaration static data</Descr><Text>*   s t a t i c   a t t r i b u t e s\n    CLASS-DATA:\n|</Text></Expand><Expand key="while"><Descr>While (§)</Descr><Text>WHILE |.\n%SurroundedText%\nENDWHILE.</Text></Expand><Expand key="*atsel"><Descr>Report Event AT SELECTION-SCREEN</Descr><Text>*---------------------------------------------------------------------*\n*     a t   s e l e c t i o n - s c r e e n\n*---------------------------------------------------------------------*\nAT SELECTION-SCREEN. \n  %class_name%=&gt;at_selection_screen( ).\n\n\n      "! &lt;p class="shorttext synchronized" lang="%dev_lang%"&gt;Check selection values&lt;/p&gt;\n      at_selection_screen,\n\n\n  METHOD at_selection_screen.\n    "-----------------------------------------------------------------*\n    "   Check selection values\n    "-----------------------------------------------------------------*\n    |\n  ENDMETHOD.                    "at_selection_screen\n\n</Text></Expand><Expand key="*blkdel"><Descr>Documentation deleted block -&gt; *-- DEL-BEGIN  NNN-yyyy-mm-dd</Descr><Text>*-- DEL-BEGIN  %Your_Initials%-%DateTime%\n*-- DEL-END    %Your_Initials%-%DateTime%</Text></Expand><Expand key="*protsec"><Descr>Declaration protected section</Descr><Text>* P R O T E C T E D   S E C T I O N\n  PROTECTED SECTION.\n\n</Text></Expand><Expand key="region"><Descr>Region (§)</Descr><Text>"$ Region %Region Name%\n%SurroundedText%\n"$ Endregion %Region Name%</Text></Expand><Expand key="*classut"><Descr>Pattern for a Unit Testing class</Descr><Text>*---------------------------------------------------------------------*\n*     CLASS  lcl_cut_%LCL_CUT_rest_of_class_name%  DEFINITION\n*---------------------------------------------------------------------*\n"! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Unit Test class: %description%&lt;/p&gt;\nCLASS lcl_cut_%LCL_CUT_rest_of_class_name% DEFINITION\n                            INHERITING FROM cl_aunit_assert \n                            FOR TESTING RISK LEVEL %risk_level_harmless_dangerous_or_critical%\n                                        DURATION   %duration_short_medium_or_long%.\n*                            INHERITING FROM cl_aunit_assert  "#AU Duration Short\n*                            FOR TESTING.                "#AU Risk_Level Harmless\n\n* P U B L I C   S E C T I O N\n  PUBLIC SECTION.\n*   i n t e r f a c e s\n    INTERFACES:\n      zif_ca_c_bool.\n\n* P R I V A T E   S E C T I O N\n  PRIVATE SECTION.\n*   a l i a s e s\n    ALIASES:\n*     Warning Levels\n      c_level_fatal         FOR  if_aunit_constants~fatal,\n      c_level_critical      FOR  if_aunit_constants~critical,\n      c_level_tolerable     FOR  if_aunit_constants~tolerable,\n*     Termination types\n      c_quit_program       FOR  if_aunit_constants~program,\n      c_quit_class         FOR  if_aunit_constants~class,\n      c_quit_method        FOR  if_aunit_constants~method,\n      c_quit_no            FOR  if_aunit_constants~no,\n*     Boolean flags\n      c_false              FOR  zif_ca_c_bool~c_false,\n      c_true               FOR  zif_ca_c_bool~c_true.\n\n**   s t a t i c   a t t r i b u t e s\n*    CLASS-DATA:\n**     o b j e c t   r e f e r e n c e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mo_...               TYPE REF TO ...\n*\n**     t a b l e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mt_...               TYPE ...\n*\n**     s t r u c t u r e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      ms_...               TYPE ...\n*\n**     s i n g l e   v a l u e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mv_...               TYPE ...\n*\n*   i n s t a n c e   a t t r i b u t e s\n    DATA:\n*     o b j e c t   r e f e r e n c e s\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Class instance under test&lt;/p&gt;\n      mo_cut               TYPE REF TO %name_global_class_to_be_tested%.\n\n**     t a b l e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mt_...               TYPE ...\n*\n**     s t r u c t u r e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      ms_...               TYPE ...\n*\n**     s i n g l e   v a l u e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Description&lt;/p&gt;\n*      mv_...               TYPE ...\n*\n\n*   s t a t i c   m e t h o d s\n    CLASS-METHODS:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Check and preparation of test data&lt;/p&gt;\n      class_setup,\n\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Deletion of test data and settings&lt;/p&gt;\n      class_teardown.\n\n*   i n s t a n c e   m e t h o d s\n    METHODS:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;Prepare data for each testing method&lt;/p&gt;\n      setup,\n\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%DESCRIPTION_first_method%&lt;/p&gt;\n      %NAME_first_method% FOR TESTING,\n\n      "! &lt;p class="shorttext synchronized" lang="%dev_lang%"&gt;Release and may delete single test data&lt;/p&gt;\n      teardown.\nENDCLASS.                     "lcl_cut_%LCL_CUT_rest_of_class_name%  DEFINITION\n\n\n*---------------------------------------------------------------------*\n*     CLASS  lcl_cut_%LCL_CUT_rest_of_class_name%  IMPLEMENTATION\n*---------------------------------------------------------------------*\nCLASS lcl_cut_%LCL_CUT_rest_of_class_name% IMPLEMENTATION.\n\n  METHOD class_setup.\n    "-----------------------------------------------------------------*\n    "   Check and preparation of test data\n    "-----------------------------------------------------------------*\n\n  ENDMETHOD.                    "class_setup\n\n\n  METHOD setup.\n    "-----------------------------------------------------------------*\n    "   Prepare data for each testing method\n    "-----------------------------------------------------------------*\n    me-&gt;mo_cut = new #( ).\n  ENDMETHOD.                    "setup\n\n\n  METHOD %NAME_first_method%.\n    "-----------------------------------------------------------------*\n    "   %DESCRIPTION_first_method%\n    "-----------------------------------------------------------------*\n    |\n  ENDMETHOD.                    "%NAME_first_method%\n\n\n  METHOD teardown.\n    "-----------------------------------------------------------------*\n    "   Release and my be delete single test data\n    "-----------------------------------------------------------------*\n\n  ENDMETHOD.                    "teardown\n\n\n  METHOD class_teardown.\n    "-----------------------------------------------------------------*\n    "   Deletion of test data and settings\n    "-----------------------------------------------------------------*\n\n  ENDMETHOD.                    "class_teardown\n\nENDCLASS.                     "lcl_cut_%LCL_CUT_rest_of_class_name%  IMPLEMENTATION</Text></Expand><Expand key="*instdata"><Descr>Declaration instance data</Descr><Text>*   i n s t a n c e   a t t r i b u t e s\n    DATA:\n|</Text></Expand><Expand key="*meth"><Descr>Method implementation part</Descr><Text>METHOD %method_name%.\n    "-----------------------------------------------------------------*\n    "   %description%\n    "-----------------------------------------------------------------*\n    |\n  ENDMETHOD.                    "%method_name%\n</Text></Expand><Expand key="do"><Descr>Do (§)</Descr><Text>DO | TIMES.\n%SurroundedText%\nENDDO.</Text></Expand><Expand key="try"><Descr>Try (§)</Descr><Text>TRY |.\n%SurroundedText%\nCATCH .\n\nENDTRY.</Text></Expand><Expand key="*statmeth"><Descr>Declaration static methods</Descr><Text>*   s t a t i c   m e t h o d s\n    CLASS-METHODS:\n|</Text></Expand><Expand key="*attr"><Descr>Definition of class attributes / global data declarations</Descr><Text>**     o b j e c t   r e f e r e n c e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_lang%"&gt;Description&lt;/p&gt;\n*      mo_...               TYPE REF TO x..\n*\n**     d a t a   r e f e r e n c e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_lang%"&gt;Description&lt;/p&gt;\n*      mr_...               TYPE REF TO x..\n*\n**     t a b l e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_lang%"&gt;Description&lt;/p&gt;\n*      mt_...               TYPE x.. \n*\n**     s t r u c t u r e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_lang%"&gt;Description&lt;/p&gt;\n*      ms_...               TYPE x..\n*\n**     s i n g l e   v a l u e s\n*      "! &lt;p class="shorttext synchronized" lang="%dev_lang%"&gt;Description&lt;/p&gt;\n*      mv_...               TYPE x..\n*\n</Text></Expand><Expand key="*instmeth"><Descr>Declaration instance method</Descr><Text>*   i n s t a n c e   m e t h o d s\n    METHODS:\n|</Text></Expand><Expand key="*types"><Descr>Type declaration</Descr><Text>*   l o c a l   t y p e   d e f i n i t i o n\n    TYPES:\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%description_structure%&lt;/p&gt;\n      BEGIN OF ty_s_%structure_name%,\n        |                   TYPE x..\n        x..                TYPE x..\n      END   OF ty_s_%structure_name%,\n      "! &lt;p class="shorttext synchronized" lang="%dev_langu%"&gt;%description_table%&lt;/p&gt;\n      ty_tt_%table_name%   TYPE STANDARD TABLE OF ty_s_%structure_name%.\n\n</Text></Expand></EXPANDS>
</XMLConfigSettings>
