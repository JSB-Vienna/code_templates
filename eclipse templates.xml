<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="ABAP" deleted="false" description="Alias and predefined vars. for msg types and ranges/sel.opt." enabled="true" name="*alias">*   a l i a s e s&#13;
    ALIASES:&#13;
*     Group description  &#13;
      x..                  FOR  x..&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Report Event AT SELECTION-SCREEN" enabled="true" name="*atsel">*---------------------------------------------------------------------*&#13;
*     a t   s e l e c t i o n - s c r e e n&#13;
*---------------------------------------------------------------------*&#13;
AT SELECTION-SCREEN. &#13;
  ${instance_variable}-&gt;at_sel_screen( ).&#13;
&#13;
&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Check selection values and handle user commands&lt;/p&gt;&#13;
      at_sel_screen,&#13;
&#13;
&#13;
  METHOD at_sel_screen.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Check selection values and handle user commands&#13;
    "-----------------------------------------------------------------*&#13;
    &#13;
  ENDMETHOD.                    "at_sel_screen&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Report Event AT SELECTION-SCREEN OUTPUT" enabled="true" name="*atselout">*---------------------------------------------------------------------*&#13;
*     a t   s e l e c t i o n - s c r e e n   OUTPUT&#13;
*---------------------------------------------------------------------*&#13;
AT SELECTION-SCREEN OUTPUT. &#13;
  ${instance_variable}-&gt;at_sel_screen_output( ).&#13;
&#13;
&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Control / adjust selection screen fields&lt;/p&gt;&#13;
      at_sel_screen_output,&#13;
&#13;
&#13;
  METHOD at_sel_screen_output.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Control / adjust selection screen fields&#13;
    "-----------------------------------------------------------------*&#13;
    &#13;
  ENDMETHOD.                    "at_sel_screen_output&#13;
&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Report Event AT SELECTION-SCREEN ON VALUE-REQUEST" enabled="true" name="*atselvr">*---------------------------------------------------------------------*&#13;
*     a t   s e l e c t i o n - s c r e e n   o n   VALUE-REQUEST  &#13;
*---------------------------------------------------------------------*&#13;
AT SELECTION-SCREEN ON VALUE-REQUEST FOR ${Selection_parameter_name}.&#13;
  "Value request help for ${selection_param_name} - ${cursor}....&#13;
  ${Class_instance_variable}-&gt;at_sel_screen_on_vr_${Selection_parameter_name}( ).&#13;
&#13;
&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Execute value help for parameter ${Selection_parameter_name}&lt;/p&gt;&#13;
      at_sel_screen_on_vr_${Selection_parameter_name},&#13;
&#13;
&#13;
  METHOD at_sel_screen_on_vr_${Selection_parameter_name}.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Execute value help for parameter ${Selection_parameter_name}&#13;
    "-----------------------------------------------------------------*&#13;
    &#13;
  ENDMETHOD.                    "at_sel_screen_on_vr_${Selection_parameter_name}&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Definition of class attributes / global data declarations" enabled="true" name="*attr">**     o b j e c t   r e f e r e n c e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      mo_...               TYPE REF TO x..&#13;
*&#13;
**     d a t a   r e f e r e n c e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      mr_...               TYPE REF TO x..&#13;
*&#13;
**     t a b l e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      mt_...               TYPE x.. &#13;
*&#13;
**     s t r u c t u r e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      ms_...               TYPE x..&#13;
*&#13;
**     s i n g l e   v a l u e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      mv_...               TYPE x..&#13;
*&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Documentation deleted block -&gt; *-- DEL-BEGIN  NNN-yyyy-mm-dd" enabled="true" name="*blkdel">*-- DEL-BEGIN  ${user} - ${iso:date('yyyy-MM-dd')} - ${Ticket_No}&#13;
*-- DEL-END    ${user} - ${iso:date('yyyy-MM-dd')} - ${Ticket_No}</template><template autoinsert="true" context="ABAP" deleted="false" description="Documentation new inserted block -&gt; *-- INS-BEGIN  NNN-yyyy-mm-dd" enabled="true" name="*blkins">*-- INS-BEGIN  ${user} - ${iso:date('yyyy-MM-dd')} - ${Ticket_No}&#13;
${cursor}&#13;
*-- INS-END    ${user} - ${iso:date('yyyy-MM-dd')} - ${Ticket_No}</template><template autoinsert="true" context="ABAP" deleted="false" description="Constants for boolean value, including Interface + aliases for 0 + 1" enabled="true" name="*bool">*   i n t e r f a c e s&#13;
    INTERFACES:&#13;
      zif_ca_c_bool.&#13;
&#13;
*   a l i a s e s&#13;
    ALIASES:&#13;
*     Boolean flags&#13;
      c_false              FOR  zif_ca_c_bool~c_false,&#13;
      c_true               FOR  zif_ca_c_bool~c_true.&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Getting BOPF TA + Service manager" enabled="true" name="*bopfmgr">    "Get BOPF transaction and service manager&#13;
    DATA(lo_ta_mgr)  = /bobf/cl_tra_trans_mgr_factory=&gt;get_transaction_manager( ).&#13;
    DATA(lo_srv_mgr) = /bobf/cl_tra_serv_mgr_factory=&gt;get_service_manager(&#13;
                                             iv_bo_key = ${bopf_interface_name}=&gt;sc_bo_key ).&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Class definition and implementation for global AND local classes" enabled="true" name="*class">"! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${Short_description_of_the_class}&lt;/p&gt;&#13;
CLASS ${Class_name} DEFINITION PUBLIC   "DELETE THIS additon PUBLIC ==&gt; ONLY for GLOBAL classes necessary!!&#13;
                               FINAL&#13;
                               CREATE PUBLIC.&#13;
* P U B L I C   S E C T I O N&#13;
  PUBLIC SECTION.&#13;
*   i n s t a n c e   m e t h o d s&#13;
    METHODS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Main method, that controls the entire processing&lt;/p&gt;&#13;
      main.&#13;
&#13;
* P R I V A T E   S E C T I O N&#13;
  PRIVATE SECTION.&#13;
&#13;
ENDCLASS.                     "${Class_name}  DEFINITION&#13;
&#13;
&#13;
CLASS ${Class_name} IMPLEMENTATION.&#13;
&#13;
  METHOD main.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Main method, that controls the entire processing&#13;
    "-----------------------------------------------------------------*&#13;
    "Local data definitions&#13;
*    DATA:&#13;
*      l...                  TYPE x..&#13;
&#13;
    ${cursor}&#13;
  ENDMETHOD.                    "main&#13;
&#13;
ENDCLASS.                     "${Class_name}  IMPLEMENTATION&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Pattern for a test double to be used in Unit Testing =&gt; ltd_" enabled="true" name="*classtd">"! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${Short_description_of_the_class}&lt;/p&gt;&#13;
CLASS ltd_${Name_of_the_test_double} DEFINITION INHERITING FROM ${Name_of_global_class_to_be_tested}&#13;
                               FINAL&#13;
                               CREATE PUBLIC.&#13;
* P U B L I C   S E C T I O N&#13;
  PUBLIC SECTION.&#13;
*   i n s t a n c e   m e t h o d s&#13;
    METHODS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Constructor&lt;/p&gt;&#13;
      constructor.&#13;
&#13;
* P R I V A T E   S E C T I O N&#13;
  PRIVATE SECTION.&#13;
&#13;
ENDCLASS.                     "ltd_${Name_of_the_test_double}  DEFINITION&#13;
&#13;
&#13;
CLASS ltd_${Name_of_the_test_double} IMPLEMENTATION.&#13;
&#13;
  METHOD constructor.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Constructor&#13;
    "-----------------------------------------------------------------*&#13;
    &#13;
  ENDMETHOD.                    "constructor&#13;
&#13;
ENDCLASS.                     "ltd_${name_test_double}  IMPLEMENTATION&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Pattern for a Unit Testing class =&gt; ltc_" enabled="true" name="*classut">&#13;
&#13;
CLASS ltc_${CLASS_NAME_incl_hint_WHAT_is_tested} DEFINITION DEFERRED.&#13;
&#13;
&#13;
CLASS ${NAME_GLOBAL_CLASS_or_INTERF_that_is_under_test} DEFINITION LOCAL FRIENDS ltc_${CLASS_NAME_incl_hint_WHAT_is_tested}.&#13;
&#13;
&#13;
*---------------------------------------------------------------------*&#13;
*     CLASS  ltc_${CLASS_NAME_incl_hint_WHAT_is_tested}  DEFINITION&#13;
*---------------------------------------------------------------------*&#13;
"! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Test class: ${description}&lt;/p&gt;&#13;
CLASS ltc_${CLASS_NAME_incl_hint_WHAT_is_tested} DEFINITION&#13;
                            INHERITING FROM cl_aunit_assert &#13;
                            FOR TESTING RISK LEVEL HARMLESS&#13;
                                        DURATION   SHORT.&#13;
*                            INHERITING FROM cl_aunit_assert  "#AU Duration Short&#13;
*                            FOR TESTING.                "#AU Risk_Level Harmless&#13;
&#13;
* P U B L I C   S E C T I O N&#13;
  PUBLIC SECTION.&#13;
&#13;
&#13;
* P R I V A T E   S E C T I O N&#13;
  PRIVATE SECTION.&#13;
*   a l i a s e s&#13;
    ALIASES:&#13;
*     Warning Levels&#13;
      c_level_fatal         FOR  if_aunit_constants~fatal,&#13;
      c_level_critical      FOR  if_aunit_constants~critical,&#13;
      c_level_tolerable     FOR  if_aunit_constants~tolerable,&#13;
*     Termination types&#13;
      c_quit_program       FOR  if_aunit_constants~program,&#13;
      c_quit_class         FOR  if_aunit_constants~class,&#13;
      c_quit_method        FOR  if_aunit_constants~method,&#13;
      c_quit_no            FOR  if_aunit_constants~no.&#13;
&#13;
*   i n s t a n c e   a t t r i b u t e s&#13;
    DATA:&#13;
*     o b j e c t   r e f e r e n c e s    &#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Class instance under test&lt;/p&gt;&#13;
      mo_cut               TYPE REF TO ${NAME_GLOBAL_CLASS_or_INTERF_that_is_under_test}.&#13;
&#13;
**     t a b l e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      mt_...               TYPE ...&#13;
*&#13;
**     s t r u c t u r e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      ms_...               TYPE ...&#13;
*&#13;
**     s i n g l e   v a l u e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      mv_...               TYPE ...&#13;
*&#13;
&#13;
*   s t a t i c   m e t h o d s&#13;
    CLASS-METHODS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Check and preparation of test data&lt;/p&gt;&#13;
      class_setup,&#13;
&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Deletion of test data and settings&lt;/p&gt;&#13;
      class_teardown.&#13;
&#13;
*   i n s t a n c e   m e t h o d s&#13;
    METHODS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Prepare data for each testing method&lt;/p&gt;&#13;
      setup,&#13;
&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${METHOD_DESCRIPTION_incl_hint_to_GIVEN}&lt;/p&gt;&#13;
      ${METHOD_NAME_incl_hint_to_GIVEN} FOR TESTING,&#13;
&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Release and may delete single test data&lt;/p&gt;&#13;
      teardown.&#13;
ENDCLASS.                     "ltc_${CLASS_NAME_incl_hint_WHAT_is_tested}  DEFINITION&#13;
&#13;
&#13;
CLASS ltc_${CLASS_NAME_incl_hint_WHAT_is_tested} IMPLEMENTATION.&#13;
&#13;
  METHOD class_setup.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Check and preparation of test data&#13;
    "-----------------------------------------------------------------*&#13;
&#13;
  ENDMETHOD.                    "class_setup&#13;
&#13;
&#13;
  METHOD setup.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Prepare data for each testing method&#13;
    "-----------------------------------------------------------------*&#13;
    me-&gt;mo_cut = NEW #( ).&#13;
  ENDMETHOD.                    "setup&#13;
&#13;
&#13;
  METHOD ${METHOD_NAME_incl_hint_to_GIVEN}.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Case/Given: ${METHOD_DESCRIPTION_incl_hint_to_GIVEN}&#13;
    "   Expected result:&#13;
    "-----------------------------------------------------------------*&#13;
    "GIVEN ............................................................&#13;
    ${cursor}&#13;
&#13;
    "WHEN ..............................................................&#13;
    me-&gt;mo_cut-&gt;x...&#13;
&#13;
    "THEN ..............................................................&#13;
    me-&gt;assert_...&#13;
  ENDMETHOD.                    "${METHOD_NAME_incl_hint_to_GIVEN}&#13;
&#13;
&#13;
  METHOD teardown.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Release and my be delete single test data&#13;
    "-----------------------------------------------------------------*&#13;
&#13;
  ENDMETHOD.                    "teardown&#13;
&#13;
&#13;
  METHOD class_teardown.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Deletion of test data and settings&#13;
    "-----------------------------------------------------------------*&#13;
&#13;
  ENDMETHOD.                    "class_teardown&#13;
&#13;
ENDCLASS.                     "ltc_${CLASS_NAME_incl_hint_WHAT_is_tested}  IMPLEMENTATION&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Class pattern for a workflow class" enabled="true" name="*classwf">"! D E L E T E   T H E S E   C O M M E N T S   A F T E R   U S A G E ! !&#13;
"! Before you start using this template, determine the requested names that are listed at next. Otherwise you may&#13;
"! need to restart using the template several times.&#13;
&#13;
"! The most important to know are at first. Yes, it is still not Clean Coded, but most of the customers still won't&#13;
"! change and I personally cling to this type of enumerations.&#13;
&#13;
"! DDIC_element_name_for_the_key ............... Use either a data element or a structure, e. g. WB2_AC_KEY for a FI document&#13;
"! DDIC_structure_name_for_the_object_data ..... These structure fields are visible to the WF and WI container, e. g. for usage in the task description&#13;
"! BO_Name_e_g_BUS2012 ......................... If you like to integrate a classic BO, give the name of it here&#13;
"! Key_field_name_Answer_with_V_KEY_or_S_KEY ... Hungarian notation is still in place, therefore ...&#13;
"! Name_of_the_class_just_created .............. Name of this class you've just created - name is used several times&#13;
"! Development_Language ........................ Development languange, enter e. g. en or de&#13;
"! Module_abbreviation_like_MM_or_FI ........... Module abbreviation like MM, FI-AA, PS, etc.&#13;
"! Short_description_of_the_class .............. Title / short description; length is reduced by Module abbr. and value BC&#13;
&#13;
&#13;
"! What are the next steps after creating the skeleton of the workflow class?&#13;
"! 1. Jump into method CHECK_EXISTENCE and replace the example by your own check and fill the attribute MS_DATA&#13;
"! 2. Jump into method DEFAULT_ATTRIBUTE_VALUE and replace the preparation of object key and description&#13;
"! 3. Implement the display functionality in method EXECUTE_DEFAULT_METHOD&#13;
"! 4. Use method GET_TASK_DESCR for the task short descriptions. See the example in the method.&#13;
"! 5. Recommendation: Start the public method names with object where they are used, like task_.., rule__.., cond_.., etc.&#13;
&#13;
&#13;
"! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${Module_abbreviation_like_MM_or_FI}: BC ${Short_description_of_the_class}&lt;/p&gt;&#13;
CLASS ${Name_of_the_class_just_created} DEFINITION PUBLIC&#13;
                                      CREATE PUBLIC.&#13;
&#13;
* P U B L I C   S E C T I O N&#13;
  PUBLIC SECTION.&#13;
*   i n t e r f a c e s&#13;
    INTERFACES:&#13;
      bi_object,&#13;
      bi_persistent,&#13;
      if_workflow,&#13;
      if_xo_const_message.&#13;
&#13;
*   a l i a s e s&#13;
    ALIASES:&#13;
*     BI_OBJECT methods&#13;
      default_attr_value FOR bi_object~default_attribute_value,&#13;
      execute_def_method FOR bi_object~execute_default_method,&#13;
      release            FOR bi_object~release,&#13;
*     BI_PERSISTENT methods&#13;
      find_by_lpor       FOR bi_persistent~find_by_lpor,&#13;
      lpor               FOR bi_persistent~lpor,&#13;
      refresh            FOR bi_persistent~refresh.&#13;
&#13;
*   c o n s t a n t s&#13;
    CONSTANTS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;My type Id&lt;/p&gt;&#13;
      c_my_typeid          TYPE sibftypeid        VALUE '${Name_of_the_class_just_created}'  ##no_text.&#13;
&#13;
*   i n s t a n c e   a t t r i b u t e s&#13;
    DATA:&#13;
*     o b j e c t   r e f e r e n c e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      mo_...       TYPE REF TO x... READ-ONLY,&#13;
&#13;
**     t a b l e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      mt_...       TYPE x... READ-ONLY,&#13;
*&#13;
*     s t r u c t u r e s&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Object data&lt;/p&gt;&#13;
      ms_data                         TYPE ${DDIC_structure_name_for_the_object_data} READ-ONLY,&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;BO-Reference on ${BO_Name_e_g_BUS2012}&lt;/p&gt;&#13;
*      mbo_${BO_Name_e_g_BUS2012}      TYPE sibflporb VALUE zif_${Module_abbreviation_like_MM_or_FI}_c_wf_bos=&gt;cbo_${BO_Name_e_g_BUS2012} READ-ONLY,&#13;
&#13;
*     s i n g l e   v a l u e s&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Key attribute - ${Description_for_Business_object_key}&lt;/p&gt;&#13;
      m${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}   TYPE ${DDIC_element_name_for_the_key} READ-ONLY,&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Default attribute with prepared object key&lt;/p&gt;&#13;
      mv_default_attr  TYPE text80 READ-ONLY.&#13;
&#13;
*   s t a t i c   m e t h o d s&#13;
    CLASS-METHODS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Create instance or get from buffer&lt;/p&gt;&#13;
      "!&#13;
      "! @parameter is_lpor      | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Workflow instance key&lt;/p&gt;&#13;
      "! @parameter i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}  | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${Description_for_Business_object_key}&lt;/p&gt;&#13;
      "! @parameter ro_instance  | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Created instance or found in buffer&lt;/p&gt;&#13;
      "! @raising   zcx_ca_param | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;&#13;
      "! @raising   zcx_ca_dbacc | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Common exception: Database access&lt;/p&gt;&#13;
      get_instance&#13;
        IMPORTING&#13;
          is_lpor           TYPE sibflpor OPTIONAL&#13;
          i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} TYPE ${DDIC_element_name_for_the_key} OPTIONAL&#13;
        RETURNING&#13;
          VALUE(ro_instance) TYPE REF TO ${Name_of_the_class_just_created}&#13;
        RAISING&#13;
          zcx_ca_param&#13;
          zcx_ca_dbacc.&#13;
&#13;
*   i n s t a n c e   m e t h o d s&#13;
    METHODS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;CONSTRUCTOR&lt;/p&gt;&#13;
      "!&#13;
      "! @parameter i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${Description_for_Business_object_key}&lt;/p&gt;&#13;
      "! @raising   zcx_ca_param | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;&#13;
      "! @raising   zcx_ca_dbacc | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Common exception: Database access&lt;/p&gt;&#13;
      constructor&#13;
        IMPORTING&#13;
          i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} TYPE ${DDIC_element_name_for_the_key}&#13;
        RAISING&#13;
          zcx_ca_param&#13;
          zcx_ca_dbacc,&#13;
&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Display object in standard transaction&lt;/p&gt;&#13;
      task_display,&#13;
&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Task to/for …. WF step&lt;/p&gt;&#13;
      "!&#13;
      "! @raising   zcx_ca_param           | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;&#13;
      "! @raising   cx_bo_action_cancelled | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Temporary Bus. Exception: Dialog Terminated Before Changing&lt;/p&gt;&#13;
      task_xxx&#13;
        RAISING&#13;
          zcx_ca_param&#13;
          cx_bo_action_cancelled,&#13;
&#13;
    "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Assemble task short text&lt;/p&gt;&#13;
    "!&#13;
    "! @parameter iv_task_desc | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Complementing description/action/function&lt;/p&gt;&#13;
    "! @parameter rv_task_desc | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Completed task short description&lt;/p&gt;&#13;
      get_task_descr&#13;
        IMPORTING&#13;
          iv_task_desc TYPE text80&#13;
        RETURNING&#13;
          VALUE(rv_task_desc) TYPE witext,&#13;
&#13;
    "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Instanzereignis auslösen&lt;/p&gt;&#13;
    "!&#13;
    "! @parameter iv_event     | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Event name&lt;/p&gt;&#13;
    "! @parameter io_evt_cnt   | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Instance of event container&lt;/p&gt;&#13;
    "! @parameter iv_do_commit | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;X = Do commit here&lt;/p&gt;&#13;
    "! @raising   zcx_ca_param | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;&#13;
    raise_event&#13;
      IMPORTING&#13;
        iv_event     TYPE sibfevent&#13;
        io_evt_cnt   TYPE REF TO if_swf_cnt_container OPTIONAL&#13;
        iv_do_commit TYPE abap_bool DEFAULT abap_false&#13;
      RAISING&#13;
        zcx_ca_param.&#13;
&#13;
*   i n s t a n c e   e v e n t s&#13;
    EVENTS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Object created&lt;/p&gt;&#13;
      created,&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Object changed&lt;/p&gt;&#13;
      changed.&#13;
&#13;
&#13;
* P R O T E C T E D   S E C T I O N&#13;
  PROTECTED SECTION.&#13;
*   a l i a s e s&#13;
    ALIASES:&#13;
*     Message types&#13;
      c_msgty_e            FOR  if_xo_const_message~error,&#13;
      c_msgty_i            FOR  if_xo_const_message~info,&#13;
      c_msgty_s            FOR  if_xo_const_message~success,&#13;
      c_msgty_w            FOR  if_xo_const_message~warning.&#13;
**     Event names&#13;
*      c_evt_name_created   FOR zif_ca_c_wf_evt_names~c_evt_name_created,&#13;
*      c_evt_name_changed   FOR zif_ca_c_wf_evt_names~c_evt_name_changed.&#13;
**     Application log&#13;
*      c_log_object         FOR  zif_xx_c_name~c_log_object,&#13;
*      c_log_subobj         FOR  zif_xx_c_name~c_log_subobj.&#13;
&#13;
*   i n s t a n c e   a t t r i b u t e s&#13;
    DATA:&#13;
*     o b j e c t   r e f e r e n c e s&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Macro handler for Macro handler for ${BO_Name_e_g_BUS2012}&lt;/p&gt;&#13;
      mo_wfmacs_${BO_Name_e_g_BUS2012}         TYPE REF TO zcl_ca_wf_exec_macros,&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Common object: Application log (BAL)&lt;/p&gt;&#13;
*      mo_log        TYPE REF TO zcl_ca_log,&#13;
&#13;
**     t a b l e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      mt_...        TYPE x...,&#13;
&#13;
*     s t r u c t u r e s&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Workflow object instance key&lt;/p&gt;&#13;
      ms_lpor       TYPE sibflpor.&#13;
&#13;
**     s i n g l e   v a l u e s&#13;
*      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
*      mv_...        TYPE x...,&#13;
&#13;
*   i n s t a n c e   m e t h o d s&#13;
    METHODS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Check existence of object&lt;/p&gt;&#13;
      "!&#13;
      "! @parameter i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}   | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${Description_for_Business_object_key}&lt;/p&gt;&#13;
      "! @raising   zcx_ca_param | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Common exception: Parameter error (INHERIT from this excep!)&lt;/p&gt;&#13;
      "! @raising   zcx_ca_dbacc | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Common exception: Database access&lt;/p&gt;&#13;
      check_existence&#13;
        IMPORTING&#13;
          i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} TYPE ${DDIC_element_name_for_the_key}&#13;
        RAISING&#13;
          zcx_ca_param&#13;
          zcx_ca_dbacc.&#13;
&#13;
&#13;
* P R I V A T E   S E C T I O N&#13;
  PRIVATE SECTION.&#13;
*   l o c a l   t y p e   d e f i n i t i o n&#13;
    TYPES:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Buffered instance&lt;/p&gt;&#13;
      BEGIN OF ty_s_buffer.&#13;
        INCLUDE TYPE sibflpor AS s_lpor.&#13;
    TYPES:&#13;
        o_instance TYPE REF TO bi_persistent,&#13;
      END   OF ty_s_buffer,&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Instance buffer&lt;/p&gt;&#13;
      ty_t_buffer TYPE SORTED TABLE OF ty_s_buffer&#13;
                                       WITH UNIQUE KEY s_lpor.&#13;
&#13;
*   s t a t i c   a t t r i b u t e s&#13;
    CLASS-DATA:&#13;
*     t a b l e s&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Instance buffer&lt;/p&gt;&#13;
      mt_buffer     TYPE ty_t_buffer.&#13;
&#13;
ENDCLASS.                     "${Name_of_the_class_just_created}  DEFINITION&#13;
&#13;
&#13;
CLASS ${Name_of_the_class_just_created} IMPLEMENTATION.&#13;
&#13;
  METHOD get_instance.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Get instance&#13;
    "-----------------------------------------------------------------*&#13;
    "Local data definitions&#13;
    DATA:&#13;
      ls_lpor    TYPE sibflpor,&#13;
      l${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} TYPE ${DDIC_element_name_for_the_key}.&#13;
&#13;
*    TRY.&#13;
    IF is_lpor IS NOT INITIAL.&#13;
      ls_lpor       = is_lpor.&#13;
      ls_lpor-catid = swfco_objtype_cl.&#13;
&#13;
      "Set key into structured definition&#13;
      IF ls_lpor-instid IS NOT INITIAL.  "Avoid destruction of type conform initial values&#13;
        l${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} = CONV #( ls_lpor-instid ).&#13;
      ENDIF.&#13;
&#13;
      "Set these values in any case, e. g. to create/get an instance only with the key string&#13;
      IF ls_lpor-typeid IS INITIAL.&#13;
        ls_lpor-typeid = ${Name_of_the_class_just_created}=&gt;c_my_typeid.&#13;
      ENDIF.&#13;
&#13;
    ELSEIF i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} IS NOT INITIAL.&#13;
      l${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} = i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}.&#13;
      ls_lpor = VALUE #( instid = CONV #( i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} )&#13;
                         typeid = ${Name_of_the_class_just_created}=&gt;c_my_typeid&#13;
                         catid  = swfco_objtype_cl ).&#13;
&#13;
    ELSE.&#13;
      "At least one of the following parameters must be passed: &amp;1 &amp;2 &amp;3 &amp;4&#13;
      RAISE EXCEPTION TYPE zcx_ca_param&#13;
        EXPORTING&#13;
          textid   = zcx_ca_param=&gt;at_least_one&#13;
         mv_msgty = c_msgty_e&#13;
          mv_msgv1 = 'IS_LPOR'&#13;
          mv_msgv2 = 'I${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}'&#13;
          mv_msgv3 = space&#13;
          mv_msgv4 = space ##no_text.&#13;
    ENDIF.&#13;
&#13;
    "If the key is still not available create no instance&#13;
    IF l${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} IS INITIAL.&#13;
      RETURN.&#13;
    ENDIF.&#13;
&#13;
    "Is an instance already created?&#13;
    READ TABLE mt_buffer INTO DATA(ls_buffer)&#13;
                         WITH KEY s_lpor = ls_lpor.&#13;
    IF sy-subrc EQ 0.&#13;
      "Refresh some data&#13;
      ls_buffer-o_instance-&gt;refresh( ).&#13;
&#13;
    ELSE.&#13;
*          "Create application log to be able to log other creation errors here&#13;
*          DATA(lo_log) = zcl_ca_log=&gt;get_instance_from_buffer(&#13;
*                                               iv_object = c_log_object&#13;
*                                               iv_subobj = c_log_subobj&#13;
*                                               is_lpor   = CORRESPONDING #( ls_lpor ) ).&#13;
&#13;
      "Create instance of passed object type&#13;
      CREATE OBJECT ls_buffer-o_instance TYPE (ls_lpor-typeid)&#13;
        EXPORTING&#13;
          i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} = l${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}.&#13;
*          io_log   = lo_log.&#13;
&#13;
      ls_buffer-s_lpor = ls_buffer-o_instance-&gt;lpor( ).&#13;
      INSERT ls_buffer INTO TABLE mt_buffer.&#13;
    ENDIF.&#13;
&#13;
    ro_instance ?= ls_buffer-o_instance.&#13;
&#13;
*      CATCH zcx_ca_error INTO DATA(lx_error).&#13;
*        IF lo_log IS BOUND.&#13;
*          lo_log-&gt;add_msg_exc( ix_excep = lx_error&#13;
*                               iv_all   = abap_true ).&#13;
*          lo_log-&gt;save( iv_commit      = abap_false   "Commit by WF runtime environment&#13;
*                        iv_in_upd_task = abap_true ).&#13;
*        ENDIF.&#13;
*    ENDTRY.&#13;
  ENDMETHOD.                    "get_instance&#13;
&#13;
&#13;
  METHOD constructor.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Constructor&#13;
    "-----------------------------------------------------------------*&#13;
    ms_lpor-typeid = c_my_typeid.&#13;
    ms_lpor-catid  = swfco_objtype_cl.&#13;
&#13;
    IF i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} IS INITIAL.&#13;
      RETURN.&#13;
    ENDIF.&#13;
&#13;
    "Check existence of object&#13;
    check_existence( i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} ).&#13;
&#13;
    "Complete and keep several attributes&#13;
    ms_lpor-instid = m${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} = i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}.&#13;
*    mbo_${BO_Name_e_g_BUS2012}-instid = CONV #( m${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} ).&#13;
&#13;
    "Set default attribute = resolved into readable key&#13;
    default_attr_value( ).&#13;
&#13;
*    "Keep log and set prepared key value&#13;
*    mo_log = io_log.&#13;
*    mo_log-&gt;set_ext_number( CONV #( mv_default_attr ) ).&#13;
  ENDMETHOD.                    "constructor&#13;
&#13;
&#13;
  METHOD check_existence.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Check existence of object&#13;
    "-----------------------------------------------------------------*&#13;
*    !!  Using the BO includes mostly an existence check  !!&#13;
*    IF mo_wfmacs_${BO_Name_e_g_BUS2012} IS BOUND.&#13;
*      mo_wfmacs_${BO_Name_e_g_BUS2012}-&gt;refresh( ).&#13;
*    ELSE.&#13;
*      "Set ${BO_Name_e_g_BUS2012} key&#13;
*      mbo_${BO_Name_e_g_BUS2012}-instid = CONV #( m${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} ).&#13;
*      mo_wfmacs_${BO_Name_e_g_BUS2012} = NEW #( mbo_${BO_Name_e_g_BUS2012} ).&#13;
*    ENDIF.&#13;
&#13;
*    SELECT SINGLE * INTO  ms_data&#13;
*                    FROM  xxxx&#13;
*                    WHERE aaaa EQ i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}.&#13;
*    IF sy-subrc NE 0.&#13;
*      "No entry exists for &amp; in Table &amp;&#13;
*      RAISE EXCEPTION TYPE zcx_ca_dbacc&#13;
*        EXPORTING&#13;
*          textid   = zcx_ca_dbacc=&gt;no_entry&#13;
*          mv_msgty = c_msgty_e&#13;
*          mv_msgv1 = CONV #( |{ i${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} ALPHA = OUT }| )&#13;
*          mv_msgv2 = 'TABLE_NAME' ##no_text.&#13;
*    ENDIF.&#13;
  ENDMETHOD.                    "check_existence&#13;
&#13;
&#13;
  METHOD task_display.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Display object in standard transaction&#13;
    "-----------------------------------------------------------------*&#13;
*    SET PARAMETER ID 'ppp' FIELD mv_user_id.&#13;
*    CALL TRANSACTION 'ttttt' WITH AUTHORITY-CHECK&#13;
*                              AND SKIP FIRST SCREEN.&#13;
  ENDMETHOD.                    "task_display&#13;
&#13;
&#13;
  METHOD task_xxx.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Call dialog to complete accounting document for posting&#13;
    "-----------------------------------------------------------------*&#13;
*    Example how to execute a BO method&#13;
*    TRY.&#13;
*        mo_wfmacs_${BO_Name_e_g_BUS2012}-&gt;call_method(&#13;
*                                       EXPORTING&#13;
*                                         iv_method    = 'Abcdef_Ghijk'&#13;
*                                       changing&#13;
*                                         ct_container = _swo_data=&gt;swo_container ) ##no_text.&#13;
*&#13;
*      CATCH zcx_ca_error INTO DATA(lx_catched).&#13;
*        MESSAGE lx_catched TYPE lx_catched-&gt;c_msgty_s DISPLAY LIKE lx_catched-&gt;mv_msgty.&#13;
*    ENDTRY.&#13;
  ENDMETHOD.                    "task_xxx&#13;
&#13;
&#13;
  METHOD get_task_descr.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Assemble task short text&#13;
    "-----------------------------------------------------------------*&#13;
    "Example ==&gt; see also method BI_OBJECT~mv_default_attr_VALUE&#13;
    "= FI: Accounting Document / Doc. No. bbbb nnnnnnn yyyy - Description&#13;
    rv_task_desc = |{ mv_default_attr } - { iv_task_desc }|.&#13;
&#13;
    "Use this statement in your task short description, here in this sample for a background step&#13;
*    &amp;_WI_OBJECT_ID.GET_TASK_DESCR(IV_TASK_DESC='Post document (BG)')&amp;&#13;
  ENDMETHOD.                    "get_task_descr&#13;
&#13;
&#13;
  METHOD raise_event.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Raise event&#13;
    "-----------------------------------------------------------------*&#13;
    zcl_ca_wf_wapi_utils=&gt;create_event_extended( is_lpor      = CORRESPONDING #( ms_lpor )&#13;
                                                 iv_event     = iv_event&#13;
                                                 io_evt_cnt   = io_evt_cnt&#13;
                                                 iv_do_commit = iv_do_commit ).&#13;
  ENDMETHOD.                    "raise_event&#13;
&#13;
&#13;
  METHOD bi_object~default_attribute_value.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Returns a description and/or prepared key of the object.&#13;
    "-----------------------------------------------------------------*&#13;
    "Example ==&gt; replace the next 3 lines (comment and key preparation) as needed for your purpose&#13;
    "TEXT-ACD = FI: Accounting Document&#13;
    mv_default_attr = condense( |{ text-acd } { m${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}-bukrs } | &amp;&#13;
                      |{ m${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}-belnr ALPHA = OUT }  { m${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY}-gjahr }| ).&#13;
    result = REF #( mv_default_attr ).&#13;
  ENDMETHOD.                    "bi_object~default_attribute_value&#13;
&#13;
&#13;
  METHOD bi_object~execute_default_method.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Execute default method&#13;
    "-----------------------------------------------------------------*&#13;
    task_display( ).&#13;
  ENDMETHOD.                    "bi_object~execute_default_method&#13;
&#13;
&#13;
  METHOD bi_object~release ##needed.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Release instance&#13;
    "-----------------------------------------------------------------*&#13;
    DELETE mt_buffer WHERE s_lpor EQ ms_lpor.&#13;
  ENDMETHOD.                    "bi_object~release&#13;
&#13;
&#13;
  METHOD bi_persistent~find_by_lpor.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Create business class instance&#13;
    "-----------------------------------------------------------------*&#13;
    TRY.&#13;
        result = CAST bi_persistent(&#13;
                         ${Name_of_the_class_just_created}=&gt;get_instance( is_lpor = lpor ) ).&#13;
&#13;
      CATCH zcx_ca_error INTO DATA(lx_catched).&#13;
        "As long as no exceptions are declared for this method, this is&#13;
        "currently the best solution.&#13;
        MESSAGE lx_catched TYPE c_msgty_s DISPLAY LIKE lx_catched-&gt;mv_msgty.&#13;
    ENDTRY.&#13;
  ENDMETHOD.                    "bi_persistent~find_by_lpor&#13;
&#13;
&#13;
  METHOD bi_persistent~lpor.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Return instance key&#13;
    "-----------------------------------------------------------------*&#13;
    result = ms_lpor.&#13;
  ENDMETHOD.                    "bi_persistent~lpor&#13;
&#13;
&#13;
  METHOD bi_persistent~refresh ##needed.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Refresh instance&#13;
    "-----------------------------------------------------------------*&#13;
*    TRY.&#13;
*        check_existence( m${Choose_key_field_name_Answer_with_either_V_KEY_or_S_KEY} ).&#13;
*&#13;
*      CATCH zcx_ca_error INTO DATA(lx_catched).&#13;
*        "As long as no exceptions are declared for this method, this is&#13;
*        "currently the best solution.&#13;
*        MESSAGE lx_catched TYPE c_msgty_s DISPLAY LIKE lx_catched-&gt;mv_msgty.&#13;
*    ENDTRY.&#13;
  ENDMETHOD.                    "bi_persistent~refresh&#13;
&#13;
ENDCLASS.                     "${Name_of_the_class_just_created}  IMPLEMENTATION&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Constants definition" enabled="true" name="*const">*   c o n s t a n t s&#13;
    CONSTANTS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${description}&lt;/p&gt;&#13;
      c_${cursor}                   TYPE x..               VALUE 'xxx'  ##no_text,&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Create exception from different message variables and return to caller" enabled="true" name="*creexc">DATA(lx_error) =&#13;
     CAST ${Name_of_exception_class}(&#13;
            zcx_ca_error=&gt;create_exception(&#13;
                     iv_excp_cls = ${Name_of_exception_class}=&gt;c_${Name_of_exception_class}&#13;
                     iv_function = ${cursor}&#13;
                     iv_subroutine = 'xxx'&#13;
                     iv_class    = 'xxx'&#13;
                     iv_method   = 'xxx'&#13;
                     is_msg      = corresponding #(  )  "Provide ONLY if NOT from SYST!! &#13;
                     is_return   = value #(  )&#13;
                     it_return   = x&#13;
                     iv_subrc    = sy-subrc  "To use SYST message variables pass only SUBRC!!&#13;
                     ix_error    = lx_catched ) ) ##no_text.&#13;
IF lx_error IS BOUND.&#13;
  RAISE EXCEPTION lx_error.&#13;
ENDIF.</template><template autoinsert="true" context="ABAP" deleted="false" description="Local data definition" enabled="true" name="*data">    "Local data definitions&#13;
    DATA:&#13;
      lv_${cursor}                  TYPE x...&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="ABAP doc Tag for synch with backend" enabled="true" name="*doc">"! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${cursor}&lt;/p&gt;</template><template autoinsert="true" context="ABAP" deleted="false" description="ABAP doc statement for a parameter" enabled="true" name="*docp">      "! @parameter ${Name_parameter} | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${description}&lt;/p&gt;&#13;
      ${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="ABAP doc statement for exception" enabled="true" name="*docr">      "! @raising   ${Name_exception_class} | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${description}&lt;/p&gt;&#13;
      ${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="Report Event INITIALIZATION" enabled="true" name="*init">*---------------------------------------------------------------------*&#13;
*     i n i t i a l i z a t i o n&#13;
*---------------------------------------------------------------------*&#13;
INITIALIZATION.&#13;
  DATA(${instance_variable}) = NEW ${local_class_name}( ).&#13;
  ${instance_variable}-&gt;initialization( ).&#13;
&#13;
&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Initialization of report data / selections&lt;/p&gt;&#13;
      initialization,&#13;
&#13;
&#13;
  METHOD initialization.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Initialization of report data / selections&#13;
    "-----------------------------------------------------------------*&#13;
    &#13;
  ENDMETHOD.                    "initialization&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Instance data declaration" enabled="true" name="*instdata">*   i n s t a n c e   a t t r i b u t e s&#13;
    DATA:&#13;
${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="Instance event declaration" enabled="true" name="*instevt">*   i n s t a n c e   e v e n t s&#13;
    EVENTS:&#13;
${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="Instance method declaration" enabled="true" name="*instmeth">*   i n s t a n c e   m e t h o d s&#13;
    METHODS:&#13;
${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="Interface declaration including the interfaces used in *alias" enabled="true" name="*interf">*   i n t e r f a c e s&#13;
    INTERFACES:&#13;
      ${cursor}&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Mark single deleted line" enabled="true" name="*linedel">"DEL - ${user} - ${iso:date('yyyy-MM-dd')} - ${Ticket_No}</template><template autoinsert="true" context="ABAP" deleted="false" description="Mark single inserted line" enabled="true" name="*lineins">"INS - ${user} - ${iso:date('yyyy-MM-dd')} - ${Ticket_No}</template><template autoinsert="true" context="ABAP" deleted="false" description="Method implementation part" enabled="true" name="*meth">  METHOD ${method_name}.&#13;
    "-----------------------------------------------------------------*&#13;
    "   ${description}&#13;
    "-----------------------------------------------------------------*&#13;
    ${cursor}&#13;
  ENDMETHOD.                    "${method_name}&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Method definition and implementation part" enabled="true" name="*methdni">      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${description}&lt;/p&gt;&#13;
      "!&#13;
      "! @parameter iv_... | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
      "! @raising   zcx_... | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Description&lt;/p&gt;&#13;
      ${method_name}&#13;
        IMPORTING&#13;
          iv_${cursor}                  TYPE x..                x..&#13;
          iv_...               TYPE x..                x..&#13;
        EXPORTING&#13;
          ev_...               TYPE x..&#13;
        CHANGING &#13;
          cv_...               TYPE x..&#13;
        RETURNING&#13;
          value(rv_..   )      TYPE x..&#13;
        RAISING&#13;
          x..&#13;
&#13;
  METHOD ${method_name}.&#13;
    "-----------------------------------------------------------------*&#13;
    "   ${description}&#13;
    "-----------------------------------------------------------------*&#13;
    "Local data definitions&#13;
*    DATA:&#13;
*      lv_...               TYPE x..&#13;
&#13;
    &#13;
  ENDMETHOD.                    "${method_name}&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Method definition and implementation for Unit Testing" enabled="true" name="*methut">      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;${METHOD_DESCRIPTION_incl_hint_to_GIVEN}&lt;/p&gt;&#13;
      ${METHOD_NAME_incl_hint_to_GIVEN} FOR TESTING,&#13;
&#13;
&#13;
  METHOD ${METHOD_NAME_incl_hint_to_GIVEN}.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Case/Given: ${METHOD_DESCRIPTION_incl_hint_to_GIVEN}&#13;
    "   Expected result:&#13;
    "-----------------------------------------------------------------*&#13;
    "GIVEN ............................................................&#13;
    ${cursor}&#13;
&#13;
    "WHEN ..............................................................&#13;
    me-&gt;mo_cut-&gt;x...&#13;
&#13;
    "THEN ..............................................................&#13;
    me-&gt;assert_...&#13;
  ENDMETHOD.                    "${METHOD_NAME_incl_hint_to_GIVEN}&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="MESSAGE statment for variables" enabled="true" name="*msg">MESSAGE ID     ${structure_name}-msgid &#13;
        TYPE   ${structure_name}-msgty &#13;
        NUMBER ${structure_name}-msgno&#13;
        WITH   ${structure_name}-msgv1  ${structure_name}-msgv2 &#13;
               ${structure_name}-msgv3  ${structure_name}-msgv4.&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Constants for message types (E, I, S, W)" enabled="true" name="*msgty">*   i n t e r f a c e s&#13;
    INTERFACES:&#13;
      if_xo_const_message.&#13;
&#13;
*   a l i a s e s&#13;
    ALIASES:&#13;
*     Message types&#13;
      c_msgty_e            FOR  if_xo_const_message~error,&#13;
      c_msgty_i            FOR  if_xo_const_message~info,&#13;
      c_msgty_s            FOR  if_xo_const_message~success,&#13;
      c_msgty_w            FOR  if_xo_const_message~warning.&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Declaration PRIVATE SECTION" enabled="true" name="*privsec">* P R I V A T E   S E C T I O N&#13;
  PRIVATE SECTION.&#13;
${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="Declaration PROTECED SECTION" enabled="true" name="*protsec">* P R O T E C T E D   S E C T I O N&#13;
  PROTECTED SECTION.&#13;
${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="Declaration PUBLIC SECTION" enabled="true" name="*publsec">* P U B L I C   S E C T I O N&#13;
  PUBLIC SECTION.&#13;
${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="Raise exception" enabled="true" name="*raise">    RAISE EXCEPTION TYPE ${Exception_class_name}&#13;
      EXPORTING&#13;
        textid   = ${Exception_class_name}=&gt;${Exception_id_as_defined_TEXT_TAB_of_class}&#13;
        mv_msgty = c_msgty_${Message_type_like_E_W_I_or_S}&#13;
        mv_msgv1 = CONV #( |{ ${Variable_name_like_LV_MATNR} ALPHA = OUT }| ).&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Selection fields with block" enabled="true" name="*selflds">* s e l e c t i o n   f i e l d s&#13;
*- ... ---------------------------------------------------------------*&#13;
*- Data selection ----------------------------------------------------*&#13;
selection-screen begin of block ${block_id} with frame &#13;
                                    title text-${block_id}.&#13;
parameters:&#13;
* Description&#13;
  p_${cursor}             x..                 option,&#13;
* Description&#13;
  p_cb...        as   checkbox       option,&#13;
* Description&#13;
  p_rb...        radiobutton         option,&#13;
&#13;
select-options:&#13;
* Description&#13;
  so_...         for  x..            option,&#13;
&#13;
*SELECTION-SCREEN  BEGIN OF LINE.&#13;
*PARAMETERS&#13;
** Description&#13;
*  p_cb_x..       AS   CHECKBOX       DEFAULT 'X'.&#13;
*SELECTION-SCREEN: COMMENT 03(30) FOR FIELD p_cb_x..,&#13;
*                  POSITION 35.&#13;
*PARAMETERS&#13;
** Description&#13;
*  p_cb_x..       AS   CHECKBOX.&#13;
*SELECTION-SCREEN: COMMENT 38(30) FOR FIELD p_cb_x..,&#13;
*                  POSITION 70.&#13;
*  parameters&#13;
**   Description&#13;
*    p_...          ...                 [option]&#13;
*  selection-screen  comment 73(30) for field p_...&#13;
*SELECTION-SCREEN  END   OF LINE.&#13;
selection-screen end   of block ${block_id}.&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Constants for Sign/Options für RANGES/SELECT-OPTIONS" enabled="true" name="*selopt">*   i n t e r f a c e s&#13;
    INTERFACES:&#13;
      if_fsbp_const_range.&#13;
&#13;
*   a l i a s e s&#13;
    ALIASES:&#13;
*     Signs and options for RANGES/SELECT-OPTIONS&#13;
      c_sign_i             FOR  if_fsbp_const_range~sign_include,&#13;
      c_sign_e             FOR  if_fsbp_const_range~sign_exclude,&#13;
      c_opt_eq             FOR  if_fsbp_const_range~option_equal,&#13;
      c_opt_ne             FOR  if_fsbp_const_range~option_not_equal,&#13;
      c_opt_gt             FOR  if_fsbp_const_range~option_greater,&#13;
      c_opt_ge             FOR  if_fsbp_const_range~option_greater_equal,&#13;
      c_opt_lt             FOR  if_fsbp_const_range~option_less,&#13;
      c_opt_le             FOR  if_fsbp_const_range~option_less_equal,&#13;
      c_opt_cp             FOR  if_fsbp_const_range~option_contains_pattern,&#13;
      c_opt_np             FOR  if_fsbp_const_range~option_not_contains_pattern,&#13;
      c_opt_bt             FOR  if_fsbp_const_range~option_between,&#13;
      c_opt_nb             FOR  if_fsbp_const_range~option_not_between.&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Coding part to create a singleton instance" enabled="true" name="*singleton">*   s t a t i c   m e t h o d s&#13;
    CLASS-METHODS:&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Get instance&lt;/p&gt;&#13;
      "!&#13;
      "! @parameter result | &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Class instance&lt;/p&gt;&#13;
      get_instance&#13;
        RETURNING&#13;
          VALUE(result) TYPE REF TO ${Class_name}.&#13;
&#13;
&#13;
&#13;
*   s t a t i c   a t t r i b u t e s&#13;
    CLASS-DATA:&#13;
*     o b j e c t   r e f e r e n c e s&#13;
      "! &lt;p class="shorttext synchronized" lang="${Development_Language}"&gt;Instance of the class itself&lt;/p&gt;&#13;
      mo_instance            TYPE REF TO ${Class_name}.&#13;
&#13;
&#13;
&#13;
  METHOD get_instance.&#13;
    "-----------------------------------------------------------------*&#13;
    "   Get instance&#13;
    "-----------------------------------------------------------------*&#13;
    IF ${Class_name}=&gt;mo_instance IS NOT BOUND.&#13;
      ${Class_name}=&gt;mo_instance = NEW #( ).&#13;
    ENDIF.&#13;
&#13;
    result = ${Class_name}=&gt;mo_instance.&#13;
  ENDMETHOD.                    "get_instance&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Start-of-selection for local class" enabled="true" name="*start">*---------------------------------------------------------------------*&#13;
*     s t a r t - o f - s e l e c t i o n&#13;
*---------------------------------------------------------------------*&#13;
START-OF-SELECTION.&#13;
  NEW ${local_class_name}( )-&gt;main( ).&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Static data declaration" enabled="true" name="*statdata">*   s t a t i c   a t t r i b u t e s&#13;
    CLASS-DATA:&#13;
${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="Static event declaration" enabled="true" name="*statevt">*   s t a t i c   e v e n t s&#13;
    CLASS-EVENTS:&#13;
${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="Static method declaration" enabled="true" name="*statmeth">*   s t a t i c   m e t h o d s&#13;
    CLASS-METHODS:&#13;
${cursor}</template><template autoinsert="true" context="ABAP" deleted="false" description="Table declaration in a report for select-options" enabled="true" name="*tables">* t a b l e s   /   s t r u c t u r e s   for selection field definition&#13;
TABLES:&#13;
  ${cursor}            "description&#13;
&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="TRY   .... CATCH for ZCX_CA_ERROR or its subclasses" enabled="true" name="*try">TRY.&#13;
  ${cursor}&#13;
&#13;
  CATCH zcx_ca_error INTO DATA(lx_catched).&#13;
    MESSAGE lx_catched TYPE lx_catched-&gt;c_msgty_s DISPLAY LIKE lx_catched-&gt;mv_msgty.&#13;
ENDTRY.</template><template autoinsert="true" context="ABAP" deleted="false" description="Type declaration" enabled="true" name="*types">*   l o c a l   t y p e   d e f i n i t i o n&#13;
    TYPES:&#13;
      "! &lt;p class="shorttext synchronized" lang="${dev_langu}"&gt;${description_structure}&lt;/p&gt;&#13;
      BEGIN OF ty_s_${structure_name},&#13;
        ${cursor}                   TYPE x..&#13;
        x..                TYPE x..&#13;
      END   OF ty_s_${structure_name},&#13;
      "! &lt;p class="shorttext synchronized" lang="${dev_langu}"&gt;${description_table}&lt;/p&gt;&#13;
      ty_tt_${table_name}   TYPE STANDARD TABLE OF ty_s_${structure_name}.&#13;
&#13;
</template></templates>